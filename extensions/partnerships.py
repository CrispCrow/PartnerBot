"Partnership commands"

import hikari
import lightbulb

from db import Database
from utils import (
    is_partner,
    parse_partnership_date,
    is_channel_into_db,
    is_notify_channel_into_db,
    check_context
)

db = Database()
partner = lightbulb.Plugin('PartnerShips')

@partner.command
@lightbulb.add_checks(lightbulb.owner_only | lightbulb.guild_only)
@lightbulb.option('text', '–¢–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞', modifier=lightbulb.OptionModifier.CONSUME_REST)
@lightbulb.option('partner', '–ü–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è', type=hikari.Member)
@lightbulb.command('–¥–æ–±–∞–≤–∏—Ç—å', '–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', pass_options=True)
@lightbulb.implements(lightbulb.PrefixCommand)
async def add_partner(
    ctx: lightbulb.PrefixContext,
    partner: hikari.User,
    text: str,
) -> None:
    context = await check_context(text)
    if await is_partner(ctx.guild_id, partner.id):
        await ctx.respond(
            hikari.Embed(
                title='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
                description='–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞',
                color=0xFF3933
            )
        )
        return
    if not context:
        await ctx.respond(
            hikari.Embed(
                title='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
                description='–í –ø–æ–ª—É—á–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä',
                color=0xFF3933
            )
        )
        return

    await db.add_partner(ctx.guild_id, partner.id, context['text'], context['url'])
    partner_channel = await db.fetch_partner_channel(ctx.guild_id)

    await ctx.respond(
        hikari.Embed(
            title='–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
            description=f'–¢–µ–∫—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {partner.mention} –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ <#{partner_channel}>',
            color=0xFFB833
        )
    )

    await (await ctx.app.rest.fetch_channel(partner_channel)).send(
        hikari.Embed(
            title='–ù–æ–≤–æ–µ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–æ',
            description=context['text'],
            color=0xFFB833
        )
        .add_field(name='üîó | –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', value=f'**[–í—Å—Ç—É–ø–∏—Ç—å]({context["url"]})**')
        .add_field(name='ü§µ | –ü–∞—Ä—Ç–Ω–µ—Ä', value=partner)
        .set_footer(text=f'Partner ID: {partner.id}')
    )


@partner.command
@lightbulb.add_checks(lightbulb.owner_only | lightbulb.guild_only)
@lightbulb.option('partner', '–ü–∞—Ä—Ç–Ω–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è', type=hikari.Member)
@lightbulb.command('—É–¥–∞–ª–∏—Ç—å', '–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤', pass_options=True)
@lightbulb.implements(lightbulb.PrefixCommand)
async def remove_partner(
    ctx: lightbulb.PrefixContext,
    partner: hikari.Member
) -> None:
    if not await is_partner(ctx.guild_id, partner.id):
        await ctx.respond(
            hikari.Embed(
                title='–£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞',
                description='–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞',
                color=0xFF3933
            )
        )
        return

    await db.delete_partner(ctx.guild_id, partner.id)
    await ctx.respond(
        hikari.Embed(
            title='–ü–∞—Ä—Ç–Ω–µ—Ä —É–¥–∞–ª–µ–Ω',
            description=f'–£—á–∞—Å—Ç–Ω–∏–∫ {partner.mention} –±–æ–ª—å—à–µ –Ω–µ –ø–∞—Ä—Ç–Ω–µ—Ä —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞',
            color=0xFFB833
        )
    )


@partner.command
@lightbulb.add_checks(lightbulb.owner_only | lightbulb.guild_only)
@lightbulb.option('partner', '–ü–∞—Ä—Ç–Ω–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞', type=hikari.Member)
@lightbulb.command('–ø–∞—Ä—Ç–Ω–µ—Ä', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ', pass_options=True)
@lightbulb.implements(lightbulb.PrefixCommand)
async def info_partner(
    ctx: lightbulb.PrefixContext,
    partner: hikari.Member
) -> None:
    if not await is_partner(ctx.guild_id, partner.id):
        await ctx.respond(
            hikari.Embed(
                title='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ',
                description='–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–∞',
                color=0xFF3933
            )
        )
        return

    partner_data = await db.fetch_partner(ctx.guild_id, partner.id)
    partnership_date = await parse_partnership_date(partner_data['date'])
    await ctx.respond(
        hikari.Embed(
            title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–Ω–µ—Ä–µ {partner}',
            description=partner_data['text'],
            color=0xFFB833
        )
        .add_field(name='üìÖ | –î–∞—Ç–∞ –∑–∞–∫–ª—é—á–µ–Ω–∏—è', value=partnership_date)
        .add_field(name='üîó | –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä', value=f'**[–í—Å—Ç—É–ø–∏—Ç—å]({partner_data["url"]})**')
        .set_footer(text=f'Partner ID: {partner.id}')
    )


@partner.command
@lightbulb.add_checks(lightbulb.owner_only | lightbulb.guild_only)
@lightbulb.option('channel', '–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤', type=hikari.TextableGuildChannel)
@lightbulb.command('–∫–∞–Ω–∞–ª', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤', pass_options=True)
@lightbulb.implements(lightbulb.PrefixCommand)
async def channel_partner(
    ctx: lightbulb.PrefixContext,
    channel: hikari.TextableGuildChannel
) -> None:
    if await is_channel_into_db(ctx.guild_id, channel.id):
        await ctx.respond(
            hikari.Embed(
                title='–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤',
                description='–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤',
                color=0xFF3933
            )
        )
        return

    await db.set_partner_channel(ctx.guild_id, channel.id)
    await ctx.respond(
        hikari.Embed(
            title='–ö–∞–Ω–∞–ª –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            description=f'–í—Å–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {channel.mention}',
            color=0xFFB833
        )
    )


@partner.command
@lightbulb.add_checks(lightbulb.owner_only | lightbulb.guild_only)
@lightbulb.option('channel', '–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', type=hikari.TextableGuildChannel)
@lightbulb.command('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', pass_options=True)
@lightbulb.implements(lightbulb.PrefixCommand)
async def notify_channel(
    ctx: lightbulb.PrefixContext,
    channel: hikari.TextableGuildChannel
) -> None:
    if await is_notify_channel_into_db(ctx.guild_id, channel.id):
        await ctx.respond(
            hikari.Embed(
                title='–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                description='–î–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
                color=0xFF3933
            )
        )
        return

    await db.set_notify_channel(ctx.guild_id, channel.id)
    await ctx.respond(
        hikari.Embed(
            title='–ö–∞–Ω–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
            description=f'–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –≤ {channel.mention}',
            color=0xFFB833
        )
    )


def load(bot: lightbulb.BotApp) -> None:
    bot.add_plugin(partner)


def unload(bot: lightbulb.BotApp) -> None:
    bot.remove_plugin(partner)
